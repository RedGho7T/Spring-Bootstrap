package ru.kata.spring.boot_security.demo.controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import ru.kata.spring.boot_security.demo.model.Role;
import ru.kata.spring.boot_security.demo.model.User;
import ru.kata.spring.boot_security.demo.service.RoleService;
import ru.kata.spring.boot_security.demo.service.UserService;

import java.util.List;
import java.util.Set;
import java.util.HashSet;

@Controller
@RequestMapping("/admin")
public class AdminController {

    private final UserService userService;
    private final RoleService roleService;

    @Autowired
    public AdminController(UserService userService, RoleService roleService) {
        this.userService = userService;
        this.roleService = roleService;
    }

    // –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    @GetMapping
    public String listUsers(Model model) {
        try {
            List<User> users = userService.getAllUsers();
            model.addAttribute("users", users);
            System.out.println("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " + users.size());
            return "admin/list";
        } catch (Exception e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " + e.getMessage());
            model.addAttribute("error", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
            return "admin/list";
        }
    }

    // –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    @GetMapping("/new")
    public String newUserForm(Model model) {
        try {
            model.addAttribute("user", new User());
            model.addAttribute("allRoles", roleService.getAllRoles());
            return "admin/new";
        } catch (Exception e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è: " + e.getMessage());
            model.addAttribute("error", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ä–º—ã");
            return "admin/list";
        }
    }

    // –û–ë–ù–û–í–õ–ï–ù–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π firstName/lastName
    @PostMapping
    public String createUser(@RequestParam("firstName") String firstName,
                             @RequestParam("lastName") String lastName,
                             @RequestParam("age") int age,
                             @RequestParam("email") String email,
                             @RequestParam("password") String password,
                             @RequestParam(value = "roles", required = false) String[] roleIds,
                             Model model) {
        try {
            System.out.println("üîÑ –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + firstName + " " + lastName);

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
            User user = new User();
            user.setFirstName(firstName);
            user.setLastName(lastName);
            user.setAge(age);
            user.setEmail(email);
            user.setPassword(password);

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–æ–ª–∏
            Set<Role> roles = new HashSet<>();
            if (roleIds != null && roleIds.length > 0) {
                for (String roleIdStr : roleIds) {
                    try {
                        Long roleId = Long.parseLong(roleIdStr);
                        Role role = roleService.getAllRoles().stream()
                                .filter(r -> r.getId().equals(roleId))
                                .findFirst()
                                .orElse(null);
                        if (role != null) {
                            roles.add(role);
                        }
                    } catch (NumberFormatException e) {
                        System.out.println("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID —Ä–æ–ª–∏: " + roleIdStr);
                    }
                }
            } else {
                // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å USER
                Role userRole = roleService.getRoleByName("ROLE_USER");
                if (userRole != null) {
                    roles.add(userRole);
                }
            }

            user.setRoles(roles);
            userService.saveUser(user);

            System.out.println("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: " + user.getFullName());
            return "redirect:/admin";

        } catch (Exception e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + e.getMessage());
            e.printStackTrace();
            model.addAttribute("error", "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + e.getMessage());
            model.addAttribute("allRoles", roleService.getAllRoles());
            return "admin/new";
        }
    }

    // –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    @GetMapping("/{id}/edit")
    public String editUserForm(@PathVariable("id") Long id, Model model) {
        try {
            User user = userService.getUserById(id);
            if (user == null) {
                System.out.println("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID " + id + " –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return "redirect:/admin";
            }

            model.addAttribute("user", user);
            model.addAttribute("allRoles", roleService.getAllRoles());
            return "admin/edit";
        } catch (Exception e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: " + e.getMessage());
            return "redirect:/admin";
        }
    }

    // –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π firstName/lastName
    @PostMapping("/{id}")
    public String updateUser(@PathVariable("id") Long id,
                             @RequestParam("firstName") String firstName,
                             @RequestParam("lastName") String lastName,
                             @RequestParam("age") int age,
                             @RequestParam("email") String email,
                             @RequestParam(value = "password", required = false) String password,
                             @RequestParam(value = "roleIds", required = false) String[] roleIds,
                             Model model) {
        try {
            System.out.println("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: " + id);

            // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            User existingUser = userService.getUserById(id);
            if (existingUser == null) {
                System.out.println("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID " + id + " –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return "redirect:/admin";
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
            existingUser.setId(id);
            existingUser.setFirstName(firstName);
            existingUser.setLastName(lastName);
            existingUser.setAge(age);
            existingUser.setEmail(email);

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–æ–ª–∏
            Set<Role> roles = new HashSet<>();
            if (roleIds != null && roleIds.length > 0) {
                for (String roleIdStr : roleIds) {
                    try {
                        Long roleId = Long.parseLong(roleIdStr);
                        Role role = roleService.getAllRoles().stream()
                                .filter(r -> r.getId().equals(roleId))
                                .findFirst()
                                .orElse(null);
                        if (role != null) {
                            roles.add(role);
                        }
                    } catch (NumberFormatException e) {
                        System.out.println("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID —Ä–æ–ª–∏: " + roleIdStr);
                    }
                }
                existingUser.setRoles(roles);
                System.out.println("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ä–æ–ª–∏: " + roles.size());
            } else {
                // –ï—Å–ª–∏ —Ä–æ–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã, –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ
                System.out.println("‚ö†Ô∏è –†–æ–ª–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å");
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
            if (password != null && !password.trim().isEmpty()) {
                existingUser.setPassword(password);
                System.out.println("‚úÖ –ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω");
            } else {
                System.out.println("‚ö†Ô∏è –ü–∞—Ä–æ–ª—å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è");
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            userService.updateUser(existingUser);
            System.out.println("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω: " + existingUser.getFullName());
            return "redirect:/admin";

        } catch (Exception e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + e.getMessage());
            e.printStackTrace();
            model.addAttribute("error", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + e.getMessage());
            model.addAttribute("allRoles", roleService.getAllRoles());
            return "admin/edit";
        }
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    @PostMapping("/{id}/delete")
    public String deleteUser(@PathVariable("id") Long id) {
        try {
            System.out.println("üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: " + id);
            userService.deleteUser(id);
            System.out.println("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ");
            return "redirect:/admin";
        } catch (Exception e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + e.getMessage());
            return "redirect:/admin";
        }
    }
}